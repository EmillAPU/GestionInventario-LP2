@page "/Entradums"
@using BlazorGestionInventario.Client
@using GestionInventario.Share.DTO.EntradumDTO
@inject IEntradumService EntradumService
@inject NavigationManager NavigationManager

<h3>Entradas</h3>

<button class="btn btn-primary" @onclick="IrACrearEntrada">Crear Nueva Entrada</button>

@if (entradas == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Producto</th>
                <th>Almacén</th>
                <th>Cantidad</th>
                <th>Fecha</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entrada in entradas)
            {
                <tr>
                    <td>@entrada.IdProducto</td>
                    <td>@entrada.IdAlmacen</td>
                    <td>@entrada.Cantidad</td>
                    <td>@entrada.Fecha</td>
                    <td>
                        <button class="btn btn-secondary" @onclick="() => IrAEditarEntrada(entrada.Id)">Editar</button>
                        <button class="btn btn-danger" @onclick="() => EliminarEntrada(entrada.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<EntradumGetDTO> entradas;

    protected override async Task OnInitializedAsync()
    {
        entradas = await EntradumService.GetEntradas();
    }

    private void IrACrearEntrada()
    {
        NavigationManager.NavigateTo("/Entradums/crear");
    }

    private void IrAEditarEntrada(int id)
    {
        NavigationManager.NavigateTo($"/Entradums/editar/{id}");
    }

    private async Task EliminarEntrada(int id)
    {
        await EntradumService.DeleteEntrada(id);
        entradas = await EntradumService.GetEntradas(); // Actualizar la lista de entradas después de eliminar
    }
}
